Index: src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Balloons.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Balloons.java b/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Balloons.java
new file mode 100644
--- /dev/null	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
+++ b/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Balloons.java	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
@@ -0,0 +1,53 @@
+package com.hillel.zakushniak.lessons.homework15_maven;
+
+/**
+ * Given a string text, you want to use the characters of text to form as many instances of the word
+ * "balloon" as possible.
+ * You can use each character in text at most once. Return the maximum number of instances that can
+ * be formed.
+ * Constraints:
+ * text consists of lower case English letters only.
+ */
+public class Balloons {
+
+    public static boolean hasNoUpperCase(String text) {
+        boolean hasNoUpperCase = text.matches(".*[A-Z].*");
+        if (hasNoUpperCase) {
+            return true;
+        }
+        System.out.println("text should consists of lower case English letters only!");
+        return false;
+    }
+
+    public static int maxNumberOfBalloons(String text) {
+
+        int countB = 0;
+        int countA = 0;
+        int countL = 0;
+        int countO = 0;
+        int countN = 0;
+
+        for (int i = 0; i < text.length(); i++) {
+            switch (text.charAt(i)) {
+                case ('b') -> countB++;
+                case ('a') -> countA++;
+                case ('l') -> countL++;
+                case ('o') -> countO++;
+                case ('n') -> countN++;
+            }
+        }
+        int[] charEntrance = {
+                countB,
+                countA,
+                countL / 2,
+                countO / 2,
+                countN};
+
+        int minEntrance = countB;
+        for (int i : charEntrance) {
+            if (i < minEntrance)
+                minEntrance = i;
+        }
+        return minEntrance;
+    }
+}
Index: src/main/java/com/hillel/zakushniak/lessons/homework15_maven/GoodPairs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/GoodPairs.java b/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/GoodPairs.java
new file mode 100644
--- /dev/null	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
+++ b/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/GoodPairs.java	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
@@ -0,0 +1,17 @@
+package com.hillel.zakushniak.lessons.homework15_maven;
+
+public class GoodPairs {
+//      Good if:   nums[i] == nums[j] and i < j
+
+    public static int numIdenticalPairs(int[] nums) {
+        if (nums == null) return 0;
+
+        int count = 0;
+        for (int i = 0; i < nums.length - 1; i++) {
+            for (int j = i + 1; j < nums.length; j++) {
+                if (nums[i] == nums[j]) count++;
+            }
+        }
+        return count;
+    }
+}
Index: src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Jewels.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Jewels.java b/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Jewels.java
new file mode 100644
--- /dev/null	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
+++ b/src/main/java/com/hillel/zakushniak/lessons/homework15_maven/Jewels.java	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
@@ -0,0 +1,15 @@
+package com.hillel.zakushniak.lessons.homework15_maven;
+
+public class Jewels {
+    public static int numJewelsInStones(String jewels, String stones) {
+
+        if (jewels == null || stones == null)
+            return 0;
+
+        int counter = 0;
+        for (int i = 0; i < stones.length(); i++) {
+            if (jewels.indexOf(stones.charAt(i)) > -1) counter++;
+        }
+        return counter;
+    }
+}
Index: src/test/java/com/hillel/zakushniak/homework15_maven/BalloonsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/hillel/zakushniak/homework15_maven/BalloonsTest.java b/src/test/java/com/hillel/zakushniak/homework15_maven/BalloonsTest.java
new file mode 100644
--- /dev/null	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
+++ b/src/test/java/com/hillel/zakushniak/homework15_maven/BalloonsTest.java	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
@@ -0,0 +1,33 @@
+package com.hillel.zakushniak.homework15_maven;
+
+import org.junit.jupiter.api.Test;
+import static com.hillel.zakushniak.lessons.homework15_maven.Balloons.hasNoUpperCase;
+import static com.hillel.zakushniak.lessons.homework15_maven.Balloons.maxNumberOfBalloons;
+import static org.junit.jupiter.api.Assertions.*;
+
+public class BalloonsTest {
+
+    @Test
+    void testForUpperCase() {
+        String text = "balloon";
+        assertFalse(hasNoUpperCase(text), "text should consists of lower case English letters only!");
+    }
+
+    @Test
+    void testEmptyString() {
+        String text = "";
+        assertEquals(0, maxNumberOfBalloons(text));
+    }
+
+    @Test
+    void testHaveWords() {
+        String text = "loonbalxballpoon";
+        assertEquals(2, maxNumberOfBalloons(text));
+    }
+
+    @Test
+    void testHaveNoWords() {
+        String text = "leetcode";
+        assertEquals(0, maxNumberOfBalloons(text));
+    }
+}
Index: src/test/java/com/hillel/zakushniak/homework15_maven/GoodPairsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/hillel/zakushniak/homework15_maven/GoodPairsTest.java b/src/test/java/com/hillel/zakushniak/homework15_maven/GoodPairsTest.java
new file mode 100644
--- /dev/null	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
+++ b/src/test/java/com/hillel/zakushniak/homework15_maven/GoodPairsTest.java	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
@@ -0,0 +1,35 @@
+package com.hillel.zakushniak.homework15_maven;
+
+import org.junit.jupiter.api.Test;
+
+import static com.hillel.zakushniak.lessons.homework15_maven.GoodPairs.numIdenticalPairs;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+public class GoodPairsTest {
+//    Good if:   nums[i] == nums[j] and i < j
+
+    @Test
+    void testHaveGoodPairs() {
+        int actual = numIdenticalPairs(new int[]{1, 2, 3, 1, 1, 3});
+        assertEquals(4, actual);
+    }
+
+    @Test
+    void testGoodPairsAllMembersEquals() {
+        int actual = numIdenticalPairs(new int[]{1, 1, 1, 1});
+        assertNotEquals(4, actual);
+    }
+
+    @Test
+    void testNoGoodPairs() {
+        int actual = numIdenticalPairs(new int[]{1, 2, 3});
+        assertEquals(0, actual);
+    }
+
+    @Test
+    void testGoodPairsForNull() {
+        int actual = numIdenticalPairs(null);
+        assertEquals(0, actual);
+    }
+}
Index: src/test/java/com/hillel/zakushniak/homework15_maven/JewelsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/hillel/zakushniak/homework15_maven/JewelsTest.java b/src/test/java/com/hillel/zakushniak/homework15_maven/JewelsTest.java
new file mode 100644
--- /dev/null	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
+++ b/src/test/java/com/hillel/zakushniak/homework15_maven/JewelsTest.java	(revision 1c15abec192f071da9e3b0b0a5f35f8c127e7c85)
@@ -0,0 +1,50 @@
+package com.hillel.zakushniak.homework15_maven;
+
+import org.junit.jupiter.api.Test;
+import static com.hillel.zakushniak.lessons.homework15_maven.Jewels.numJewelsInStones;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class JewelsTest {
+
+    @Test
+    void testHaveJewels() {
+        int value = numJewelsInStones("aA", "aAAbbbb");
+        assertEquals(3, value);
+    }
+
+    @Test
+    void testNoJewels() {
+        int value = numJewelsInStones("aABbCc", "DfjfkgjuKGEJDL");
+        assertEquals(0, value);
+    }
+
+    @Test
+    void testOneJewel() {
+        int value = numJewelsInStones("a", "ZassfdsytAZ");
+        assertEquals(1, value);
+    }
+
+    @Test
+    void testOneStone() {
+        int value = numJewelsInStones("ZassfdsytAZ", "a");
+        assertEquals(1, value);
+    }
+
+    @Test
+    void testEmptyStone() {
+        int value = numJewelsInStones("dzfmh", "");
+        assertEquals(0, value);
+    }
+
+    @Test
+    void testEmptyJewels() {
+        int value = numJewelsInStones("", "dzfmh");
+        assertEquals(0, value);
+    }
+
+    @Test
+    void testForNull() {
+        int value = numJewelsInStones(null, null);
+        assertEquals(0, value);
+    }
+}
